# -*- coding: utf-8 -*-
"""
Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal
numbers are all figurate (polygonal) numbers and are generated by
the following formulae:

Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Square	 	P4,n=n2	 	1, 4, 9, 16, 25, ...
Pentagonal	 	P5,n=n(3n1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	P6,n=n(2n1)	 	1, 6, 15, 28, 45, ...
Heptagonal	 	P7,n=n(5n3)/2	 	1, 7, 18, 34, 55, ...
Octagonal	 	P8,n=n(3n2)	 	1, 8, 21, 40, 65, ...
The ordered set of three 4-digit numbers: 8128, 2882, 8281,
 has three interesting properties.

The set is cyclic, in that the last two digits of each number
 is the first two digits of the next number (including the
  last number with the first).
Each polygonal type: triangle (P3,127=8128), square (P4,91=8281),
 and pentagonal (P5,44=2882), is represented by a different number in the set.
This is the only set of 4-digit numbers with this property.
Find the sum of the only ordered set of six cyclic 4-digit numbers
for which each polygonal type: triangle, square, pentagonal,
hexagonal, heptagonal, and octagonal, is represented by a
different number in the set.
"""
__author__ = 'bryukh'

CONST = 0

from eulerfunc import triangle_gen, square_gen, pentagonal_gen, hexagonal_gen,\
                      heptagonal_gen, octagonal_gen

def search_cycle(res, *args):
    if not args:
        yield res
    for lst in args:
        for numb in lst:
            if str(res[-1])[-2:] == str(numb)[:2]:
                new_args = list(args[:])
                new_args.remove(lst)
                for c in search_cycle(res + [numb], *new_args):
                    yield c




def solution(value=CONST):
    """
    Bryukh's solution
    >>> solution()
    
    """
    triangle_lst = list(triangle_gen(1000, 9999))
    square_lst = list(square_gen(1000, 9999))
    pentagonal_lst = list(pentagonal_gen(1000, 9999))
    hexagonal_lst = list(hexagonal_gen(1000, 9999))
    heptagonal_lst = list(heptagonal_gen(1000, 9999))
    octagonal_lst = list(octagonal_gen(1000, 9999))
    for first in octagonal_lst:
        cycles =  search_cycle([first], heptagonal_lst, hexagonal_lst,
                                pentagonal_lst, square_lst, triangle_lst)
        for cycle in cycles:
            if cycle and str(cycle[-1])[-2:] == str(cycle[0])[:2]:
                return sum(cycle)

if __name__ == "__main__":
    solution()
    from doctest import testmod

    testmod(verbose=True)  